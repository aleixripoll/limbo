---
import { Image } from "astro:assets";
import config from "@config/config.json";
import { getSinglePage } from "@lib/contentParser.astro";
import dateFormat from "@lib/utils/dateFormat";
import { humanize, slugify } from "@lib/utils/textConverter";
import { BiCategoryAlt, BiCalendar, BiTime } from "react-icons/bi/index.js";

const authors = await getSinglePage("authors");
const { summary_length } = config.settings;

interface Props {
  className?: string;
  posts: any;
  fluid?: boolean;
}

const { className, posts, fluid } = Astro.props;

// Calculate reading time (rough estimate: 200 words per minute)
function calculateReadingTime(content: string): number {
  const words = content.split(/\s+/).length;
  return Math.ceil(words / 200);
}
---

<div class={`masonry-grid mt-8 ${className || ""}`}>
  {
    posts.map((post: any, i: number) => {
      const readingTime = calculateReadingTime(post.body || "");
      return (
        <article class="masonry-item" data-post-slug={post.slug}>
          {post.data.image && (
            <a 
              href={`${import.meta.env.BASE_URL}${post.slug}`} 
              class="masonry-card group"
              aria-label={`Llegir article: ${post.data.title}`}
            >
              <div class="masonry-image-container">
                <Image
                  class="masonry-image"
                  src={post.data.image}
                  alt={post.data.title}
                  width="400"
                  height="300"
                  loading="lazy"
                />
                <div class="masonry-overlay">
                  <span class="masonry-read-more">Llegir m√©s</span>
                </div>
                
                {/* Reading time badge */}
                {readingTime > 0 && (
                  <div class="absolute top-3 right-3 bg-black/70 backdrop-blur-sm text-white text-xs px-2 py-1 rounded-full font-medium">
                    <BiTime className="inline mr-1 h-3 w-3" />
                    {readingTime} min
                  </div>
                )}
              </div>
              
              <div class="masonry-content">
                <div class="masonry-meta">
                  <div class="masonry-date">
                    <BiCalendar className="masonry-icon" />
                    <span>{dateFormat(post.data.date)}</span>
                  </div>
                  <div class="masonry-categories">
                    <BiCategoryAlt className="masonry-icon" />
                    <div class="masonry-category-list">
                      {post.data.categories.map((category: string, i: number) => (
                        <span class="masonry-category">
                          {humanize(category)}{i !== post.data.categories.length - 1 && ","}
                        </span>
                      ))}
                    </div>
                  </div>
                </div>
                
                <h3 class="masonry-title">
                  {post.data.title}
                </h3>
                
                <p class="masonry-excerpt">
                  {post.data.description
                    ? post.data.description
                    : post.body?.slice(
                        0,
                        Number(i < 2 && fluid != false ? summary_length * 2 : summary_length)
                      ) + "..."}
                </p>
                
              </div>
            </a>
          )}
        </article>
      );
    })
  }
</div>
