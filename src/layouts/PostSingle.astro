---
import { Image } from "astro:assets";
//import Share from "@components/Share.astro";
import SimilarPosts from "@components/SimilarPosts.astro";
import { getSinglePage } from "@lib/contentParser.astro";
import dateFormat from "@lib/utils/dateFormat";
import similarItems from "@lib/utils/similarItems";
import { humanize, markdownify, slugify } from "@lib/utils/textConverter";
import { BiCalendar, BiCategoryAlt, BiSolidChevronUpCircle } from "react-icons/bi/index.js";
import Disqus from "@components/Disqus";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";

//const allAuthors = await getSinglePage("authors");
const posts = await getSinglePage("posts");
const { post } = Astro.props;
const similarPosts = similarItems(post, posts, post.slug);
const { Content, remarkPluginFrontmatter } = await post.render();
const { title, description, authors, categories, image, image_attribution, date, tags } = post.data;

// https://docs.astro.build/en/recipes/modified-time/
dayjs.extend(utc);
const lastModified = dayjs(remarkPluginFrontmatter.lastModified)
  .utc()
  .format("HH:mm:ss DD MMMM YYYY UTC");
---

<section class="section">
  <div class="container max-w-[1000px]">
    <article class="row justify-center -mx-4">
      <div class="text-center md:col-10">
        <h1 set:html={markdownify(title)} class="h2" />
        <p class="py-4 lg:text-xl font-light">{description}</p>
        <ul class="mt-2 flex flex-wrap items-center justify-center text-sm font-light">
          {/*<li class="mx-3">
            {
              allAuthors
                .filter((author: any) =>
                  authors
                    .map((author: string) => slugify(author))
                    .includes(slugify(author.data.title))
                )
                .map((author: any) => (
                  <a
                    href={`${import.meta.env.BASE_URL}authors/${slugify(author.slug)}`}
                    class="flex items-center font-medium hover:text-primary"
                  >
                    {author.data.image && (
                      <Image
                        src={author.data.image}
                        alt={author.data.title}
                        height={50}
                        width={50}
                        class="mr-2 h-6 w-6 rounded-full"
                      />
                    )}
                    <BiUser className="mr-1 h-[18px] w-[18px]" />
                    <span>{author.data.title}</span>
                  </a>
                ))
            }
          </li>*/}
          <li class="pb-2 mx-2 flex flex-wrap items-center">
            <BiCalendar className="mr-1 h-5 w-5 text-primary" />
            <>
              {
                date ? dateFormat(date) : dateFormat(lastModified)
              }
            </>
          </li>
          <li class="pb-2 mx-2 flex flex-wrap items-center">
            <BiCategoryAlt className="mr-1 h-[18px] w-[18px] text-primary" />
            <>
              <ul>
                {
                  categories.map((category: string, i: number) => (
                    <li class="inline-block">
                      <a
                        href={`${import.meta.env.BASE_URL}categories/${slugify(category)}`}
                        class="mr-1 hover:text-primary"
                      >
                        {humanize(category)}{i !== post.data.categories.length - 1 && ","}
                      </a>
                    </li>
                  ))
                }
              </ul>
            </>
          </li>
        </ul>
      </div>

      <div class="col-12 mb-4 mt-8 px-0 sm:px-2 w-auto">
        {
          image && (
            <Image
              src={image}
              widths={[720, 900]}
              sizes={`(max-width: 720px) 720px, 900px`}
              alt={title}
              class="sm:rounded-lg max-h-[110vh] w-full"
            />
          )
        }
        {image_attribution && (
            <a target="_blank" href={post.data.image_attribution.url} class="attribution">
              Foto de {post.data.image_attribution.author} a {post.data.image_attribution.site}
            </a>
        )}
      </div>

      <div class="md:col-10">
        <div class="content mb-16 text-left">
          <Content />
        </div>
        <div class="flex flex-wrap items-center justify-between">
          <ul class="mb-4 mr-4 space-x-3">
            {
              tags.map((tag: string) => (
                <li class="inline-block mb-2">
                  <a
                    href={`${import.meta.env.BASE_URL}tags/${slugify(tag)}`}
                    class="block rounded-lg bg-theme-light dark:bg-theme-dark px-4 py-2 hover:text-primary"
                  >
                    # {humanize(tag)}
                  </a>
                </li>
              ))
            }
          </ul>
          {/* <Share
            className="social-share mb-4"
            title={title}
            description={description}
            slug={post.slug}
          />*/}
        </div>
      </div>
    </article>
    <Disqus className="mt-20" client:load />
  </div>
</section>

<!-- similar posts -->
{
  similarPosts.length > 0 && (
    <section class="section pt-0">
      <div class="container">
        <h1 class="h3 mb-8 text-center uppercase font-light">Articles similars</h1>
        <SimilarPosts posts={similarPosts.slice(0, 4)} />
      </div>
    </section>
  )
}

<button
  id="scroll-to-top"
  class="fixed bottom-6 right-4 lg:right-20 xl:right-52 2xl:right-80 hidden whitespace-nowrap rounded-full opacity-80 bg-none hover:bg-primary hover:text-white"><BiSolidChevronUpCircle className="h-[50px] w-[50px]"/>
</button>

<script is:inline>
  // Attaches links to headings in the document, allowing sharing of sections easily.
  function addHeadingLinks() {
    let headings = Array.from(document.querySelectorAll("h2, h3"));
    for (let heading of headings) {
      heading.classList.add("group");
      let link = document.createElement("a");
      link.innerText = "#";
      link.className =
        "heading-link hidden group-hover:inline-block hover:text-primary ml-2 text-light no-underline";
      link.href = "#" + heading.id;
      link.ariaHidden = "true";
      heading.appendChild(link);
    }
  }
  addHeadingLinks();

  // When the user scrolls down 400px from the top of the document, show the "Back to Top" button.
  window.onscroll = function () {
    scrollFunction();
  };
  function scrollFunction() {
    if (
      document.body.scrollTop > 400 ||
      document.documentElement.scrollTop > 400
    ) {
      document.querySelector("#scroll-to-top").style.display = "block";
    } else {
      document.querySelector("#scroll-to-top").style.display = "none";
    }
  }
  // Scrolls the document to the top when the "Back to Top" button is clicked.
  function backToTop() {
    document.querySelector("#scroll-to-top")?.addEventListener("click", () => {
      document.body.scrollTop = 0; // For Safari
      document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    });
  }
  backToTop();
</script>
